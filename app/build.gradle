plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    // Add the Google services Gradle plugin
//    id 'com.google.gms.google-services'

}


android {
    configurations {
        implementation.exclude group: 'org.jetbrains', module: 'annotations' }

    kotlinOptions {
        freeCompilerArgs = ['-Xjvm-default=enable']
        jvmTarget = '11'
    }

    compileSdk 32

    aaptOptions {
        noCompress "tflite" // TensorFlow 라이브러리에 대한 정의
    }

    buildFeatures {
        viewBinding = true //
    }

    defaultConfig {
        applicationId "com.kgg.android.seenear"
        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}


dependencies {

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.0"

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.room:room-compiler:2.5.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'


    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.9")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9")

    implementation("com.squareup.okhttp3:okhttp:4.6.0")
    implementation("com.squareup.okhttp3:logging-interceptor:4.6.0") // 로그 찍기

    implementation("com.squareup.retrofit2:retrofit:2.9.0")
    implementation("com.squareup.retrofit2:converter-gson:2.9.0")

    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'com.google.android.gms:play-services-location:17.0.0'

    implementation 'com.squareup.retrofit2:converter-scalars:2.5.0'

    implementation 'org.tensorflow:tensorflow-lite:2.8.0'
    implementation 'org.tensorflow:tensorflow-lite-select-tf-ops:2.8.0'


    //    parcelize

    apply plugin: 'com.android.application'
    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-parcelize'


    implementation 'org.tensorflow:tensorflow-lite:2.6.0'
    implementation 'org.tensorflow:tensorflow-lite-select-tf-ops:2.6.0' // TensorFlow Lite Select TF Ops 버전에 맞게 변경
    implementation group: 'org.tensorflow', name: 'tensorflow-core-platform', version: '0.2.0'

    // FCM
    implementation 'com.google.firebase:firebase-messaging-ktx:23.0.0'

    implementation 'com.google.gms:google-services:4.3.15'

    // Import the Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:31.2.3')

    // TODO: Add the dependencies for Firebase products you want to use
    // When using the BoM, don't specify versions in Firebase dependencies
    implementation 'com.google.firebase:firebase-analytics-ktx'

    // Lottie (로딩 애니메이션)
    implementation 'com.airbnb.android:lottie:3.7.0'


    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
}

task copyCustomOps(type: Copy) {
    from(project(':').file('src/main/jniLibs'))
    into("$buildDir/native-libs")
    include("**/*.so")
}

task createMergedNativeLibs(type: Zip) {
    dependsOn(copyCustomOps)
    into('lib') {
        from("$buildDir/native-libs")
        from("$buildDir/intermediates/stripped_native_libs/release/out")
    }
}